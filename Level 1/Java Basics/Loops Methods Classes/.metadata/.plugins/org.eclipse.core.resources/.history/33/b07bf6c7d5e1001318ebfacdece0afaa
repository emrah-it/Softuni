//Problem 3.	Full House
//In most Poker games, the "full house" hand is defined as three cards of the same
//face + two cards of the same face, other than the first, regardless of the
//card's suits. The cards faces are "2", "3", "4", "5", "6", "7", "8", "9", "10",
//"J", "Q", "K" and "A". The card suits are "♣", "♦", "♥" and "♠". Write a
//program to generate and print all full houses and print their number.

import java.util.*;

import javax.print.attribute.HashAttributeSet;

import org.junit.*;

public class _3_FullHouse {

	static private int max = 100;
	static private int n;
	static private int k;
	static private int[] array = new int[max];
	static private int counter = 0;
	static private boolean cardCombination = false;

	static private String[] allCards = { "2", "3", "4", "5", "6", "7", "8",
			"9", "10", "J", "Q", "K", "A" };
	static private String[] allColors = { "♣", "♦", "♥", "♠" };
	static private List<String> allCardCombination = new ArrayList<String>();

	//static private Set<String> allPosibleCombSet = new HashSet<String>();
	static private Set<String> endCardCombinations = new HashSet<String>();
	
	
	//static private Set<String> allColorCombinationToCheck = new HashSet<String>();
	static private List<String[]> colorCombinationStrings = new ArrayList<String[]>();
	
	

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		n = allCards.length;
		k = 5;
		cardCombination = true;
		Variate(0);
		Iterator<String> firstIterator = endCardCombinations.iterator();
		while(firstIterator.hasNext()){
			System.out.println(firstIterator.next());
		}
		
		
		n = allColors.length;
		cardCombination = false;
		Variate(0);

		System.out.println(counter);

	}

	private static void Variate(int i) {
		if (i >= k) {
			if (cardCombination) {
				checkIsItFullHouse();
			} else {
				checkColorCombination();
			}
			return;
		}
		for (int j = 0; j < n; j++) {
			array[i] = j;
			Variate(i + 1);
		}
	}

	private static void checkColorCombination() {
		Map<String, Integer> currentCards = new HashMap<String, Integer>();
		String[] arrayFromColors = new String[5];
		for (int i = 0; i < 5; i++) {
			arrayFromColors[i] = allColors[array[i]];
			if (currentCards.containsKey(allColors[array[i]])) {
				currentCards.put(allColors[array[i]],
						currentCards.get(allColors[array[i]]) + 1);
			} else {
				currentCards.put(allColors[array[i]], 1);
			}
		}
		for (String key : currentCards.keySet()) {
			if (currentCards.get(key) == 5) {
				return;
			} 
		}
		
		Arrays.sort(arrayFromColors);
		//System.out.println(String.join(", ", arrayFromColors));

		//if (!allColorCombinationToCheck.contains(String.join("", arrayFromColors))) {
			colorCombinationStrings.add(arrayFromColors);
		//}
		
	}

	static void checkIsItFullHouse() {
		Map<String, Integer> currentCards = new HashMap<String, Integer>();
		String[] arrayFromColors = new String[5];
		for (int i = 0; i < 5; i++) {
			arrayFromColors[i] = allCards[array[i]];
			if (currentCards.containsKey(allCards[array[i]])) {
				currentCards.put(allCards[array[i]],
						currentCards.get(allCards[array[i]]) + 1);
			} else {
				currentCards.put(allCards[array[i]], 1);
			}
		}
		boolean treeCard = false;
		boolean twoCard = false;
		
		for (String key : currentCards.keySet()) {
			if (currentCards.get(key) == 3) {
				treeCard = true;
			} else if(currentCards.get(key) == 2){
				twoCard= true;
			}
		}
		Arrays.sort(arrayFromColors);
		
		if (treeCard && twoCard) {
			endCardCombinations.add(String.join(", ", arrayFromColors));
		}

	}

}
