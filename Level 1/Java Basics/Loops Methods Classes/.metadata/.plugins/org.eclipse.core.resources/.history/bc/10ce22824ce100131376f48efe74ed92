}
//Problem 3.	Full House
//In most Poker games, the "full house" hand is defined as three cards of the same
//face + two cards of the same face, other than the first, regardless of the
//card's suits. The cards faces are "2", "3", "4", "5", "6", "7", "8", "9", "10",
//"J", "Q", "K" and "A". The card suits are "♣", "♦", "♥" and "♠". Write a
//program to generate and print all full houses and print their number.


import java.lang.Number;
import java.util.*;

public class _3_FullHouse {

  static int max = 100;
  static int n;
  static private int[] a = new int[max];


  static private String inputString;
  static private String[] allCards = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"};
  static private String[] allColors = {"♣", "♦", "♥", "♠"};


  public static void main(String[] args) {
      Scanner input = new Scanner(System.in);
      n =  input.nextInt();
      for (int i = 0; i < n; i++)
      {
          a[i] = i;
      }
      Permute(n);

  }

  private static void Permute(int k)
  {

      if (k == 0)
      {
          Print();
          return;
      }
      else
      {
          int swap;
          Permute(k - 1);
          for (int i = 0; i < k -1; i++)
          {
              swap = a[i];
              a[i] = a[k - 1];
              a[k - 1] = swap;
              Permute(k - 1);
              swap = a[i];
              a[i] = a[k - 1];
              a[k - 1] = swap;
          }
      }
  }

  private static void Print()
  {
      for (int i = 0; i < n; i++)
      {
          System.out.print(a[i] + 1 + " ");
      }
      System.out.println();
  }

}
