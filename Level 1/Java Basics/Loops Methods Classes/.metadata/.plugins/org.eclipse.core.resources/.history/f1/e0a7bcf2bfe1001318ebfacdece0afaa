//Problem 3.	Full House
//In most Poker games, the "full house" hand is defined as three cards of the same
//face + two cards of the same face, other than the first, regardless of the
//card's suits. The cards faces are "2", "3", "4", "5", "6", "7", "8", "9", "10",
//"J", "Q", "K" and "A". The card suits are "♣", "♦", "♥" and "♠". Write a
//program to generate and print all full houses and print their number.

import java.lang.Number;
import java.util.*;

public class _3_FullHouse {

	static private int max = 100;
	static private int n;
	static private int k;
	static private int[] array = new int[max];

	static private String[] allCards = { "2", "3", "4", "5", "6", "7", "8",
			"9", "10", "J", "Q", "K", "A" };
	static private String[] allColors = { "♣", "♦", "♥", "♠" };
	static private List<String> allCardCombination = new ArrayList<String>();

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		allCardCombination = getAllCardCombinations(allCards, allColors);

		Variate(n);

	}

	private static List<String> getAllCardCombinations(String[] cards,
			String[] colors) {

		for (int i = 0; i < cards.length; i++) {
			for (int j = 0; j < colors.length; j++) {
				String current = cards[i] + colors[j];
			}
		}

		return null;
	}

	private static void Variate(int i) {
		if (i >= k) {
			Print(i);
			return;
		}
		for (int j = 0; j < n; j++) {
			array[i] = j;
			Variate(i + 1);
		}
	}

	static void Print(int i) {
		for (int l = 0; l <= i - 1; l++) {
			// Console.Write( array[l] + 1 + " ");
		}
		// Console.WriteLine();
	}

}
